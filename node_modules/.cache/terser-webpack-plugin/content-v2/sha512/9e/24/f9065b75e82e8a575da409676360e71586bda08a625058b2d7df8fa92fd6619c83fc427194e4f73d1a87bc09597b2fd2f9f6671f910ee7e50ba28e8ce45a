{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{432:function(t,a,s){\"use strict\";s.r(a);var n=s(56),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h3\",{attrs:{id:\"数据类型\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据类型\"}},[t._v(\"#\")]),t._v(\" 数据类型\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"字符串-双引号或者单引号引起来的文本\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字符串-双引号或者单引号引起来的文本\"}},[t._v(\"#\")]),t._v(\" 字符串：双引号或者单引号引起来的文本\")]),t._v(\" \"),s(\"p\",[t._v(\"字符串内字符都有序号，正向是从 0 开始，反向是-1 开始。str[-1]指的就是最后一个字符。\")]),t._v(\" \"),s(\"p\",[t._v(\"字符串的拼接：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"ul\",[s(\"li\",[t._v(\"号，对于字符串或者非字符串使用该符号就能拼接成一个字符串。\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\".format()，中间的参数，对应字符串中的{}，相当于 c 语言里的占位符。\")])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"整数-python-中整数的除法能得到小数-这一点与-c-不同\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#整数-python-中整数的除法能得到小数-这一点与-c-不同\"}},[t._v(\"#\")]),t._v(\" 整数：python 中整数的除法能得到小数，这一点与 c 不同\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"布尔值-两个数据比较中产生布尔值。true-false\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#布尔值-两个数据比较中产生布尔值。true-false\"}},[t._v(\"#\")]),t._v(\" 布尔值：两个数据比较中产生布尔值。True False\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",[s(\"code\",[t._v(\"0、[]、{}、‘’没有内容的这些符号都代表了false。\\n\")])])]),s(\"h4\",{attrs:{id:\"列表\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#列表\"}},[t._v(\"#\")]),t._v(\" 列表\")]),t._v(\" \"),s(\"p\",[t._v(\"s = [a1,a2,a3,a4]各个元素有自己的位置，从 s[0]开始，位置又叫索引\")]),t._v(\" \"),s(\"p\",[t._v(\"列表不规定里面数据类型且不限定长度。\")]),t._v(\" \"),s(\"p\",[t._v(\"s[-1]表示倒数第一个元素，s[0:4]是 s[0]-s[3]的元素，s[1:]是 s[1]-s[3],s[:2]是 s[0],s[1]\")]),t._v(\" \"),s(\"p\",[t._v(\"s.append(s[n])可把 s[n]添加到 s 列表的尾部。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"字典\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字典\"}},[t._v(\"#\")]),t._v(\" 字典\")]),t._v(\" \"),s(\"p\",[t._v(\"d = {键 1:值 1,键 2:值 2} 通过字典的键取出对应的值。d[键 1]==值 1\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"函数\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#函数\"}},[t._v(\"#\")]),t._v(\" 函数\")]),t._v(\" \"),s(\"p\",[t._v(\"input():里面的内容相当于 print 可以输出出来，然后键入的数据能作为字符串类型赋给变量，\")]),t._v(\" \"),s(\"p\",[t._v(\"如果 n=int(input(...))则要求输入的内容是 int 类型的，如果不是则会报错。\")]),t._v(\" \"),s(\"p\",[t._v(\"type 函数，括号内加入变量，得到的结果<class 'int'>这样的。\")]),t._v(\" \"),s(\"p\",[t._v(\"自定义函数：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-python extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-python\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"def\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"fun\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"x\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"\\nfun\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"x\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"注意函数局部变量不能放到外面去使用。\")]),t._v(\" \"),s(\"p\",[t._v(\"python 的缩进不能用掺杂空格，否则会报错 unexpected indent\")]),t._v(\" \"),s(\"p\",[t._v(\"传入任意数量的实参：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-python extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-python\"}},[s(\"code\",[t._v(\"    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"def\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"deliver\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"ele\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"in\")]),t._v(\" ele\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"print\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"i\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"形参名*ele 中的星号让 python 创建一个元组，函数在实际使用时不管多少个实参都会传入这个元组中。若函数有多个形参，这类带星号的元组形参要放在最后，优先匹配其他形参。\")]),t._v(\" \"),s(\"p\",[t._v(\"同理，形参名前两个星号（**ele）能收集键值对，传入参数也是字典的形式,key=value\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"控制流\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#控制流\"}},[t._v(\"#\")]),t._v(\" 控制流\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"条件判断\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#条件判断\"}},[t._v(\"#\")]),t._v(\" 条件判断\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"if n1==n2:\\n    .....\\nelif n2==n3:\\n    .....\\nelse:\\n    .....\\n\")])])]),s(\"h4\",{attrs:{id:\"循环\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#循环\"}},[t._v(\"#\")]),t._v(\" 循环\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"while n1:             for i in 一堆数据:\\n    ...                   .....\\n\")])])]),s(\"p\",[t._v(\"for 循环一般与 range()一起使用，range(t)可生成 0 到 t-1 的整数序列，range(a,b)则是 a 到 b-1\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"异常处理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异常处理\"}},[t._v(\"#\")]),t._v(\" 异常处理\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"list=[0,1,2,3]\\nfor i in list:\\n    try:\\n        print(6/i)\\n    except ZeroDivisionError(错误说明，也可以不写):\\n        print('0不能为除数')\\n\")])])]),s(\"h3\",{attrs:{id:\"编码\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#编码\"}},[t._v(\"#\")]),t._v(\" 编码\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"编码表\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"适用性\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"特点\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"ASCII 码\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"英文，字符\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"占用空间小\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"GB2312 码、GBK 码\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"支持中文\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"GBK 码是升级版\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Unicode 码\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"支持国际语言\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"占用空间大，在 ascii 前补 8 个 0 就是\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"UTF-8 码\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"支持国际语言\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"Unicode 的升级，占用空间小，ascii 被包含其中\")])])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"编码与解码\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#编码与解码\"}},[t._v(\"#\")]),t._v(\" 编码与解码\")]),t._v(\" \"),s(\"p\",[t._v(\"print('编码内容'.encode('编码表')) (编码结果首位的 b 代表 bytes 字节类型的数据)。\\\\x 是分割符\")]),t._v(\" \"),s(\"p\",[t._v(\"print(解码内容.decode('编码表')) 解码内容通常不是字符串，不必加引号\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"获取单个字符的十进制整数编码\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#获取单个字符的十进制整数编码\"}},[t._v(\"#\")]),t._v(\" 获取单个字符的十进制整数编码\")]),t._v(\" \"),s(\"p\",[t._v(\"print(ord('字')，打印出这个字的十进制整数编码\")]),t._v(\" \"),s(\"p\",[t._v(\"print(chr(24561)),根据十进制再打印出对应的字\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类\"}},[t._v(\"#\")]),t._v(\" 类\")]),t._v(\" \"),s(\"p\",[t._v(\"创建类用 class 声明，类一般第一个字母大写\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-python extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-python\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Dog\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"def\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"__init__\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"self\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"name\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"age\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n        self\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"name\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"name\\n        self\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"age\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"age\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"def\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sit\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"self\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"print\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'...'\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"如例子所示，类有一个\"),s(\"strong\",[t._v(\"init\")]),t._v(\"初始化方法，在生成实例的时候就会做，传入参数赋给属性，self 代表传入该实例本身，因此在传入的时候不用写。\")]),t._v(\" \"),s(\"p\",[t._v(\"在使用类中的方法时要用‘.’来引用。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"继承\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#继承\"}},[t._v(\"#\")]),t._v(\" 继承\")]),t._v(\" \"),s(\"p\",[t._v(\"创建子类时，父类(超类)也必须在当前文件中，且位于子类前面，子类会继承父类中的所有属性和方法，定义子类时要在括号中填入父类的名称。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-python extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-python\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Cat\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"Dog\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"def\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"__init__\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"self\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"name\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"age\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"super\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"__init__\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"age\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"子类中可增加父类没有的方法和属性，当需要重写父类中某方法时，可一样写上这个方法，然后内容会覆盖父类中的方法。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"文件读写\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文件读写\"}},[t._v(\"#\")]),t._v(\" 文件读写\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"file=open('地址','r',encoding='utf-8')\"),s(\"br\"),t._v(\"\\nfilecontent=file.read()\"),s(\"br\"),t._v(\"\\nfilex=file.readlines()\"),s(\"br\"),t._v(\"\\nprint(filex)\"),s(\"br\"),t._v(\"\\nfile.close()\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"file=open('地址','w',encoding='utf-8')\"),s(\"br\"),t._v(\"\\nfile.write('内容\\\\n')\"),s(\"br\"),t._v(\"\\nfile.close()\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"file=open('地址','a',encoding='utf-8')\"),s(\"br\"),t._v(\"\\nfile.write('内容')\"),s(\"br\"),t._v(\"\\nfile.close()\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"读和写都是字符串类型，写和追加若没有文件，都会新建。只写会覆盖原文件，追加再末尾补充\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"光是 r 是只读文件，要关掉再用 open 再 w 方法才能再写文件。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"如果要写入图片或音频之类二进制形式保存的文件，则用 wb 方法写入。\")])]),t._v(\" \"),s(\"p\",[t._v(\"readlines()读取的是一个字符串的列表，列表中每个字符串是文件中每一行，而且还有换行符。直接 read()得到的是一整块不好处理数据，列表就好办了，可以用 for...in 遍历这个列表。\")]),t._v(\" \"),s(\"p\",[t._v(\"再用 split()方法可以将列表中每行字符串再按空格切分成更小的字符串列表。\")]),t._v(\" \"),s(\"p\",[t._v(\"join()方法的用法是 str.join(sequence),str 是连接符，可以是''也可以是'-'，而 sequence 是数据序列，可以是列表。就能将列表元素拼接成一个字符串。\")]),t._v(\" \"),s(\"p\",[t._v(\"write()写入的必须是字符串，但是 writelines()可以写入列表。\")])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}